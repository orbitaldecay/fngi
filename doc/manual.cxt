[h2]The fngi programmer's manual[/]

[h2]1. Document conventions[/]
[+]
1. Text written in the @FngiLanguage is [c]monospaced[c].
2. The word @ALWAYS implies the sentence is true without exception.
3. The word @USUALLY implies the sentence is generally true. Exceptions are explicitly stated in [b]bold[b].
4. The word @SOMETIMES implies the sentence is generally false. Exceptions are explicitly stated in [b]bold[b].
5. The word @NEVER implies the sentence is false without exception.
6. The word @Equals implies that two phrases are equivalent (logical equivalence).
7. The phrase @IsA implies the first thing is an instance of the second thing, but the second thing is not neccesarily an instance of the first (logical implication).
8. The phrase @HasA implies the first thing is a property of the second thing.
[/]

[!]Text in developer comments is for authors.[/] 

[h2]2. Introduction[/]

The @FngiLanguage is an imperative, stack-based programming language. The purpose of this manual is to explain the @Meaning of @FngiPrograms.

[h2]3. @FngiProgramsCap[/]
[+]
1. A @FngiProgram @Equals a @Sequence of @Tokens.
2. The @Meaning of a @FngiProgram @Equals the effect of @Executing the @FngiProgram.
3. To @Execute a @FngiProgram @Equals to @Evaluate the @FngiProgram, then @Execute the @GlobalDelayQueue.
4. To @Evaluate a @FngiProgram @Equals @USUALLY to @Evaluate its @Tokens in order.
[/]

[h2]4. @DelayQueuesCap[/]
[+]
1. The @GlobalDelayQueue @IsA @DelayQueue.
2. To @Execute an @DelayQueue @Equals to @Execute the @Tokens which were added to it in the order in which they were added.
[/]

[h2]5. @TokensCap[/]
[+]
1. To @Evaluate a @Token @Equals @USUALLY to add it to an @DelayQueue. That @DelayQueue @Equals @USUALLY the @GlobalDelayQueue.
2. To @Execute a @Token @Equals to do what the @Token @Means.
3. The @Evaluation of a @Token @HasA @Context.

[!]3. @WhiteSpaceCap is @SOMETIMES used to separate @Tokens.[/]
[!]6. @TokensCap @NEVER contain @WhiteSpace.[/]
[!]7. @WhiteSpaceCap @NEVER has @Meaning.[/]
[/]

[h2]6. @ValueTokensCap[/]
[+]
1. A @ValueToken @IsA @Token.
2. A @ValueToken represents a @Number.
3. The @Meaning of a @ValueToken @Equals to @Push the @Number that is represents to the @WorkingStack.
[!]4. @ValueTokensCap must be separated by @WhiteSpace when they occur @Sequentially in a @FngiProgram.[/]
[/]

[h3]Examples[/]
[+]
* The @Token @ProgramOne @IsA @ValueToken. This @Token @Means to @Push the @Number 1 to the @WorkingStack.
* The @Token @ProgramTwelve @IsA @ValueToken. This @Token @Means to @Push the @Number 12 to the @WorkingStack.
* The @Token @ProgramHex @IsA @ValueToken. This @Token @Means @Means to @Push the @Number 16 to the @WorkingStack.
* The @FngiProgram @ProgramOneTwo is made of the @Tokens @ProgramOne and @ProgramTwo. The @Token @ProgramOne @IsA @ValueToken. The @Token @ProgramTwo @IsA @ValueToken. The @FngiProgram @ProgramOneTwo @Means to @Push the @Number 1 to the @WorkingStack, then @Push the @Number 2 to the @WorkingStack. 
[/]

[h2]7. @FunctionTokensCap[/]
[+]
1. A @Defered @Token @IsA @Token.
2. A @Token @IsA @Defered @Token @Iff that @Token is @Evaluated after the @Token that follows it is @Evaluated, but not before.
3. [b]A @FunctionToken @IsA @Defered @Token.[b]
[/]

[h3]Examples[/]

The @Token @ProgramAdd @IsA @FunctionToken. The @Token @ProgramAdd @Means to @Pull two @Numbers from the @WorkingStack, then @Push their sum to the @WorkingStack. The @FngiProgram @ProgramOnePlusTwo @Means

[+]
1. @PushCap the @Number 1 to the @WorkingStack.
2. @PushCap the @Number 2 to the @WorkingStack (@ProgramAdd @IsA @Defered @Token).
3. Execute @ProgramAdd. Now, the @Number 3 is on the @WorkingStack
[/]

The token @ProgramMul @IsA @FunctionToken. The @Token @ProgramMul @Means to @Pull two @Numbers from the @WorkingStack, then @Push their product to the @WorkingStack. The @FngiProgram @Program1Add2Mul4 @Means

[+]
1. @PushCap the @Number 1 to the @WorkingStack.
2. @PushCap the @Number 2 to the @WorkingStack (@ProgramAdd @IsA @Defered @Token).
3. Execute @ProgramAdd. Now, the @Number 3 is on the @WorkingStack.
4. @PushCap the @Number 4 to the @WorkingStack (@ProgramMul @IsA @Defered @Token).
5. Execute @ProgramMul. Now, the @Number 12 on the @WorkingStack.
[/]

When @Defered @Tokens occur @Sequentially, they are @Evaluated in the order opposite to which they occur. The @FngiProgram @ProgramOneTwoAddMulFour @Means

[+]
1. @PushCap the @Number 1 to the @WorkingStack.
2. @PushCap the @Number 2 to the @WorkingStack.
3. @PushCap the @Number 4 to the @WorkingStack (@ProgramAdd @IsA @Defered @Token and @ProgramMul @IsA @Defered @Token).
4. Execute @ProgramMul. Now, the @Number 8 is on the @WorkingStack.
5. Execute @ProgramAdd. Now, the @Number 9 is on the @WorkingStack.
[/]

[!]Immediate and delayed definitions do not belong here. Find a way to explain syntactic tokens without resorting to these definitions.[/]

[h2]@ImmediateCap @Tokens[/]

[+]
1. An @Immediate @Token @IsA @Token.
2. A @Token @IsA @Immediate @Token @Iff that @Token is not added to an @DelayQueue when it is @Evaluated, but is @Executed when it is @Evaluated.
3. @TokensCap are @SOMETIMES @Immediate @Tokens.
[/]

[h2]@ImmediateCap @Contexts[/]

[+]
1. An @Immediate @Context @IsA @Context.
2. A @Context @IsA @Immediate @Context @Iff a @Token @Evaluated with that @Context is treated as if the @Token were an @Immediate @Token.
3. @ContextsCap are @SOMETIMES @Immediate @Contexts.
[/]

[h3]Examples[/]

A more detailed definition of the meaning of the @FngiProgram @ProgramOneTwo is

[+]
* The @Token @ProgramOne is @Evaluated. Neiter the @Token nor the @Context are @Immediate, so it is added to the @GlobalDelayQueue.
* The @Token @ProgramTwo is @Evaluated. Neiter the @Token nor the @Context are @Immediate, so it is added to the @GlobalDelayQueue.
[/]

The @Evaluation of the @FngiProgram is complete. The @GlobalDelayQueue is @Executed.

[+]
* The token @ProgramOne is the first @Token that was added to the @GlobalDelayQueue. It is @Executed. The @Number 1 is pushed to the @WorkingStack.
* The token @ProgramTwo is the next @Token that was added to the @GlobalDelayQueue. It is @Executed. The @Number 2 is pushed to the @WorkingStack.
[/]

[h2]9. @SyntacticTokensCap[/]

[+]
1. [b]A @SyntacticToken @IsA @Immediate @Token.[b] 
[/]

[h3]Examples[/]

@SyntacticTokensCap can be built-in or user defined. The general purpose of @SyntacticTokens is to implement syntactic constructs. 

The @Token @ProgramLeftParen @IsA @SyntacticToken. The @Token @ProgramLeftParen means to @Evaluate all subsequent @Tokens in the @Context in which @ProgramLeftParen was @Evaluated until the @Token @ProgramRightParen occurs. The @FngiProgram @ProgramParenExample means

[+]
* The @Token @ProgramOne is @Evaluated. The @Token @ProgramOne is added to the @GlobalDelayQueue.
* The @Token @ProgramLeftParen is @Evaluated (@ProgramAdd @IsA @Defered @Token). The @Token @ProgramLeftParen @IsA @Immediate @Token, so it is @Executed now. That means
[+]
* The @Token @ProgramTwo is @Evaluated. The @Token @ProgramTwo is added to the @GlobalDelayQueue.
* The @Token @ProgramFour is @Evaluated (@ProgramMul @IsA @Defered @Token). The @Token @ProgramFour is added to the @GlobalDelayQueue.
* The @Token @ProgramMul is @Evaluated. The @Token @ProgramMul is added to the @GlobalDelayQueue.
* The @Token @ProgramRightParen occurs.
[/]
* The @Token @ProgramAdd is @Evaluated. The @Token @ProgramAdd is added to the @GlobalDelayQueue.
[/]

Now the @GlobalDelayQueue is executed. This means

[+]
* The @Token @ProgramOne is @Executed. The @Number 1 is @Pushed to the @WorkingStack.
* The @Token @ProgramTwo is @Executed. The @Number 2 is @Pushed to the @WorkingStack.
* The @Token @ProgramFour is @Executed. The @Number 4 is @Pushed to the @WorkingStack.
* The @Token @ProgramMul is @Executed. The @Number 8 is on the @WorkingStack.
* The @Token @ProgramAdd is @Executed. The @Number 9 is on the @WorkingStack.
[/]

The @ProgramImm @Token @IsA @SyntacticToken. The @ProgramImm @Token @Means to @Evaluate the next @Token with an @Immediate @Context. The @FngiProgram @ProgramTwoImmThreeFour @Means

[+]
* The @Token @ProgramTwo is added to the @GlobalDelayQueue.
* The @Token @ProgramImm @IsA @Immediate @Token, so it is @Executed. This means:
[+]
* The @Token @ProgramThree is @Evaluated with an @Immediate @Context. It is @Executed, and the @Number 3 is pushed to the @WorkingStack.
[/]
* The @Token @ProgramFour is added to the @GlobalDelayQueue.
[/]

Currently the @Number 3 is on the @WorkingStack. Now the @GlobalDelayQueue is @Executed. That means

[+]
* @PushCap the @Number 2 to the @WorkingStack.
* @PushCap the @Number 4 to the @WorkingStack.
[/]

[!]Explain [c]()[c], [c]+(1 2)[c] and [c]1 2 +()[c] in this section. Correct grammar and spelling mistakes using automated checker.[/]

[!] glossary -------------------------------------------------	[/]


[t set=ALWAYS]			[i][b]always[b][i]		[/]
[t set=USUALLY]			[i][b]usually[b][i]		[/]
[t set=SOMETIMES]		[i][b]sometimes[b][i]		[/]
[t set=NEVER]			[i][b]never[b][i]		[/]
[t set=Iff]			[i][b]if and only if[b][i]	[/]
[t set=HasA]			[i][b]has a[b][i]		[/]
[t set=IsA]			[i][b]is a[b][i]		[/]
[t set=Equals]			[i][b]is[b][i]			[/]


[!] fngi related [/]

[t set=Fngi]			fngi				[/]
[t set=FngiLanguage]		fngi language			[/]
[t set=FngiEnvironment]		fngi environment		[/]
[t set=FngiInterpreter]		fngi interpreter		[/]

[t set=FngiProgramsCap]		Fngi programs			[/]
[t set=FngiProgram]		fngi program			[/]
[t set=FngiPrograms]		fngi programs			[/]

[!] token names [/]

[t set=TokensCap]		Tokens				[/]
[t set=Token]			token				[/]
[t set=Tokens]			tokens				[/]

[!] tokens have a kind [/]

[t set=ValueTokenCap]		Value token			[/]
[t set=ValueTokensCap]		Value tokens			[/]
[t set=ValueToken]		value token			[/]
[t set=ValueTokens]		value tokens			[/]

[t set=FunctionTokenCap]	Function token			[/]
[t set=FunctionTokensCap]	Function tokens			[/]
[t set=FunctionToken]		function token			[/]
[t set=FunctionTokens]		function tokens			[/]

[t set=SyntacticTokensCap]	Syntactic tokens		[/]
[t set=SyntacticToken]		syntactic token			[/]
[t set=SyntacticTokens]		syntactic tokens		[/]

[!] evaluation and execution, and parsed [/]

[t set=Parse]			parse				[/]
[t set=Parsed]			parsed				[/]
[t set=Parsing]			parsing				[/]

[t set=Evaluate]		evaluate			[/]
[t set=Evaluated]		evaluated			[/]
[t set=Evaluating]		evaluating			[/]
[t set=Evaluation]		evaluation			[/]
[t set=Evaluates]		evaluates			[/]

[!] evaluation has a context [/]

[t set=ContextsCap]		Contexts			[/]
[t set=Contexts]		contexts			[/]
[t set=Context]			context				[/]

[t set=Execute]			execute				[/]
[t set=Executed]		executed			[/]
[t set=Execution]		execution			[/]
[t set=Executing]		executing			[/]

[!] defered, delayed, immediate, context [/]

[t set=DeferedCap]		Defered				[/]
[t set=Defered]			defered				[/]
[t set=Delayed]			delayed				[/]
[t set=ImmediateCap]		Immediate			[/]
[t set=Immediate]		immediate			[/]
[t set=Immediately]		immediately			[/]

[!] data structures and data types [/]

[t set=WorkingStack]		working stack			[/]
[t set=Push]			push				[/]
[t set=PushCap]			Push				[/]
[t set=Pushed]			pushed				[/]
[t set=Pull]			pull				[/]
[t set=Number]			number				[/]
[t set=Numbers]			numbers				[/]
[t set=DelayQueuesCap]		Execution store			[/]
[t set=DelayQueue]		execution store			[/]
[t set=GlobalDelayQueue]	global execution store		[/]

[!] spor [/]

[t set=Spor]			spor				[/]
[t set=SporCap]			Spor				[/]

[!] misc [/]

[t set=Sequence]		sequence			[/]
[t set=Sequentially]		sequentially			[/]
[t set=Subsequent]		subsequent			[/]
[t set=WhiteSpace]		white space			[/]
[t set=WhiteSpaceCap]		White space			[/]
[t set=Means]			means				[/]
[t set=Meaning]			meaning				[/]
[t set=String]			string				[/]

[!] example code ---------------------------------------------	[/]

[t set=ProgramOne]		[c]1[c]				[/]
[t set=ProgramTwo]		[c]2[c]				[/]
[t set=ProgramOneTwo]		[c]1 2[c]			[/]
[t set=ProgramTwelve]		[c]12[c]			[/]
[t set=ProgramHex]		[c]0x10[c]			[/]
[t set=ProgramAdd]		[c]+[c]				[/]
[t set=ProgramOnePlusTwo]	[c]1 + 2[c]			[/]
[t set=ProgramMul]		[c]*[c]				[/]
[t set=Program1Add2Mul4]	[c]1 + 2 * 4[c]			[/]
[t set=ProgramOneTwoAddMulFour]	[c]1 2 + * 4[c]			[/]
[t set=ProgramImm]		[c]imm#[c]			[/]
[t set=ProgramTwoImmThreeFour]	[c]2 imm#3 4[c]			[/]
[t set=ProgramImmThree]		[c]imm#3[c]			[/]
[t set=ProgramThree]		[c]3[c]				[/]
[t set=ProgramFour]		[c]4[c]				[/]
[t set=ProgramFive]		[c]5[c]				[/]
[t set=ProgramParenExample]	[c]1 + (2 * 4)[c]		[/]
[t set=ProgramLeftParen]	[c]([c]				[/]
[t set=ProgramRightParen]	[c])[c]				[/]
